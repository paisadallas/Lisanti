/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package armadopalletv1;

import Days.JFrameMonday;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.print.Book;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import static jdk.nashorn.internal.objects.Global.print;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import sumaProductos.SumarPallets;
import validacion.Organizar;
//import static sun.misc.Version.print;

/**
 *
 * @author Fredy
 */
public class JFramePruebas1 extends javax.swing.JFrame {
   // File f = new File("D:/Proyectos java/Lisanti version1.0/JFrameRutas.xlsx");
//    File f = new File("D:/Users/Fredy/Documents/NetBeansProjects/ArmadoPalletV1/src/rutasMacro.xlsm");
// File f = new File("C:/User/SANTIAGO/Desktop/rutasMacro.xlsm");
    File f = new File("C:/Users/Fredy/Documents/Lisanti/rutasMacro.xlsm");
    int filasExcel1=34;
    String datosTabla[][]={};
    String titulosTabla[]={"DESCRIPTION","QTY","SLOT"};
    DefaultTableModel tablaUnir= new DefaultTableModel(datosTabla, titulosTabla);
    DefaultTableModel tablaProducto1;
     DefaultTableModel tablaProducto2;
     DefaultTableModel tablaProducto3;
     DefaultTableModel tablaProducto4;
     protected String rutaActual= "";
     static int totalCajas=0;
     static int cajasP1=0;
     static int cajasP2=0;
     static int cajasP3=0;
     static int cajasP4=0;
//   JDialogUnir accesoUnir = new JDialogUnir(this,true);
     
    public JFramePruebas1() { 
                
        initComponents();
        limpiaTabla();
        //--------------- CAMBIAMO COLORES --------------------
        
       this.getContentPane().setBackground(Color.WHITE);
       jPanelPallets.setBackground(Color.WHITE);
       panelPallet1.setBackground(Color.WHITE);
       panelPallet2.setBackground(Color.WHITE);
       panelPallet3.setBackground(Color.WHITE);
       panelPallet4.setBackground(Color.WHITE);
       panelBotones.setBackground(Color.WHITE);
       panelCreador.setBackground(Color.WHITE);
       panelRuta.setBackground(Color.WHITE);
       panelNext.setBackground(Color.WHITE);
       
       jtableProductos1.setBackground(Color.WHITE);
       jScrollPane1.setBackground(Color.WHITE);
       
       jBImport1.setBackground(Color.WHITE);
       jBImport2.setBackground(Color.WHITE);
       jBImport3.setBackground(Color.WHITE);
       jBImport4.setBackground(Color.WHITE);
       
       jButtonGO0.setBackground(Color.WHITE);
       jButtonGO.setBackground(Color.WHITE);
       jButtonGO3.setBackground(Color.WHITE);
       jButtonG04.setBackground(Color.WHITE);
       
       jBDocument.setBackground(Color.WHITE);
       jBNew.setBackground(Color.WHITE);
       jbtPrint.setBackground(Color.WHITE);
       jBNext.setBackground(Color.WHITE);
       jBScan.setBackground(Color.WHITE);
       //------------- Icono -------------------
       
        ImageIcon imageIcon;
        imageIcon =new  ImageIcon(getClass().getResource("/iconos/iconoLisanti.png")); 
        Image miImage = imageIcon.getImage();
        this.setIconImage((miImage));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelPallets = new javax.swing.JPanel();
        panelPallet1 = new javax.swing.JPanel();
        jBImport1 = new javax.swing.JButton();
        jButtonGO0 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtableProductos1 = new validacion.MiRender();//javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jText1 = new javax.swing.JTextField();
        jlbTituloP1 = new javax.swing.JLabel();
        panelPallet2 = new javax.swing.JPanel();
        jButtonGO = new javax.swing.JButton();
        jText2 = new javax.swing.JTextField();
        jBImport2 = new javax.swing.JButton();
        jlbTituloP2 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtableProductos2 = new javax.swing.JTable();
        panelPallet3 = new javax.swing.JPanel();
        jBImport3 = new javax.swing.JButton();
        jButtonGO3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jText3 = new javax.swing.JTextField();
        jlbTituloP3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtableProductos3 = new javax.swing.JTable();
        panelPallet4 = new javax.swing.JPanel();
        jButtonG04 = new javax.swing.JButton();
        jBImport4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jText4 = new javax.swing.JTextField();
        jlbTituloP4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtableProductos4 = new javax.swing.JTable();
        panelBotones = new javax.swing.JPanel();
        jBDocument = new javax.swing.JButton();
        jBNew = new javax.swing.JButton();
        jbtPrint = new javax.swing.JButton();
        jBScan = new javax.swing.JButton();
        panelCreador = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        panelRuta = new javax.swing.JPanel();
        jLabelNoRuta = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        panelNext = new javax.swing.JPanel();
        jBNext = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBImport1.setText("IMPORT");
        jBImport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImport1ActionPerformed(evt);
            }
        });

        jButtonGO0.setText("GO!");
        jButtonGO0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGO0ActionPerformed(evt);
            }
        });

        jtableProductos1.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        jtableProductos1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtableProductos1);

        jLabel1.setText("ROWS");

        jlbTituloP1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlbTituloP1.setText("PALLET # 1");

        javax.swing.GroupLayout panelPallet1Layout = new javax.swing.GroupLayout(panelPallet1);
        panelPallet1.setLayout(panelPallet1Layout);
        panelPallet1Layout.setHorizontalGroup(
            panelPallet1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPallet1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPallet1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPallet1Layout.createSequentialGroup()
                        .addComponent(jBImport1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jText1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(jButtonGO0)
                        .addGap(18, 18, 18)
                        .addComponent(jlbTituloP1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelPallet1Layout.setVerticalGroup(
            panelPallet1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPallet1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPallet1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBImport1)
                    .addComponent(jButtonGO0)
                    .addComponent(jLabel1)
                    .addComponent(jText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbTituloP1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonGO.setText("GO!");
        jButtonGO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGOActionPerformed(evt);
            }
        });

        jBImport2.setText("IMPORT");
        jBImport2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImport2ActionPerformed(evt);
            }
        });

        jlbTituloP2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlbTituloP2.setText("PALLET # 2");

        jLabel2.setText("ROWS");

        jtableProductos2.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        jtableProductos2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtableProductos2);

        javax.swing.GroupLayout panelPallet2Layout = new javax.swing.GroupLayout(panelPallet2);
        panelPallet2.setLayout(panelPallet2Layout);
        panelPallet2Layout.setHorizontalGroup(
            panelPallet2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPallet2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPallet2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPallet2Layout.createSequentialGroup()
                        .addComponent(jBImport2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jText2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(jButtonGO)
                        .addGap(28, 28, 28)
                        .addComponent(jlbTituloP2))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelPallet2Layout.setVerticalGroup(
            panelPallet2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPallet2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPallet2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBImport2)
                    .addComponent(jText2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGO)
                    .addComponent(jLabel2)
                    .addComponent(jlbTituloP2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jBImport3.setText("IMPORT");
        jBImport3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImport3ActionPerformed(evt);
            }
        });

        jButtonGO3.setText("GO!");
        jButtonGO3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGO3ActionPerformed(evt);
            }
        });

        jLabel3.setText("ROWS");

        jlbTituloP3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlbTituloP3.setText("PALLET # 3");

        jtableProductos3.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        jtableProductos3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jtableProductos3);

        javax.swing.GroupLayout panelPallet3Layout = new javax.swing.GroupLayout(panelPallet3);
        panelPallet3.setLayout(panelPallet3Layout);
        panelPallet3Layout.setHorizontalGroup(
            panelPallet3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPallet3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBImport3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jText3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jButtonGO3)
                .addGap(18, 18, 18)
                .addComponent(jlbTituloP3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panelPallet3Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelPallet3Layout.setVerticalGroup(
            panelPallet3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPallet3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPallet3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBImport3)
                    .addComponent(jText3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGO3)
                    .addComponent(jLabel3)
                    .addComponent(jlbTituloP3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonG04.setText("GO!");
        jButtonG04.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonG04ActionPerformed(evt);
            }
        });

        jBImport4.setText("IMPORT");
        jBImport4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImport4ActionPerformed(evt);
            }
        });

        jLabel4.setText("ROWS");

        jlbTituloP4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlbTituloP4.setText("PALLET # 4");

        jtableProductos4.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        jtableProductos4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jtableProductos4);

        javax.swing.GroupLayout panelPallet4Layout = new javax.swing.GroupLayout(panelPallet4);
        panelPallet4.setLayout(panelPallet4Layout);
        panelPallet4Layout.setHorizontalGroup(
            panelPallet4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPallet4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelPallet4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPallet4Layout.createSequentialGroup()
                        .addComponent(jBImport4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jText4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonG04)
                        .addGap(18, 18, 18)
                        .addComponent(jlbTituloP4)
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPallet4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        panelPallet4Layout.setVerticalGroup(
            panelPallet4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPallet4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPallet4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonG04)
                    .addComponent(jLabel4)
                    .addComponent(jText4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBImport4)
                    .addComponent(jlbTituloP4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelPalletsLayout = new javax.swing.GroupLayout(jPanelPallets);
        jPanelPallets.setLayout(jPanelPalletsLayout);
        jPanelPalletsLayout.setHorizontalGroup(
            jPanelPalletsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPalletsLayout.createSequentialGroup()
                .addGroup(jPanelPalletsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelPalletsLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(panelPallet1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPalletsLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(panelPallet3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelPalletsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPalletsLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(panelPallet2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPalletsLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(panelPallet4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelPalletsLayout.setVerticalGroup(
            jPanelPalletsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPalletsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPalletsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelPallet1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelPallet2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPalletsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelPallet3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelPallet4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jBDocument.setText("DOCUMENT");
        jBDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDocumentActionPerformed(evt);
            }
        });

        jBNew.setText("NEW");
        jBNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNewActionPerformed(evt);
            }
        });

        jbtPrint.setText("PRINT");
        jbtPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPrintActionPerformed(evt);
            }
        });

        jBScan.setText("SCAN");
        jBScan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBScanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonesLayout = new javax.swing.GroupLayout(panelBotones);
        panelBotones.setLayout(panelBotonesLayout);
        panelBotonesLayout.setHorizontalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jBScan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBDocument, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBNew, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtPrint, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        panelBotonesLayout.setVerticalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBScan, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBNew, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        jLabel5.setText("By: PaisaDallas@gmail.com");

        javax.swing.GroupLayout panelCreadorLayout = new javax.swing.GroupLayout(panelCreador);
        panelCreador.setLayout(panelCreadorLayout);
        panelCreadorLayout.setHorizontalGroup(
            panelCreadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCreadorLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelCreadorLayout.setVerticalGroup(
            panelCreadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCreadorLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5))
        );

        jLabelNoRuta.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelNoRuta.setForeground(new java.awt.Color(255, 0, 0));
        jLabelNoRuta.setText("00");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("RUTA:");

        javax.swing.GroupLayout panelRutaLayout = new javax.swing.GroupLayout(panelRuta);
        panelRuta.setLayout(panelRutaLayout);
        panelRutaLayout.setHorizontalGroup(
            panelRutaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRutaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRutaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(panelRutaLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabelNoRuta)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        panelRutaLayout.setVerticalGroup(
            panelRutaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRutaLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelNoRuta)
                .addGap(22, 22, 22))
        );

        jBNext.setText("NEXT");
        jBNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelNextLayout = new javax.swing.GroupLayout(panelNext);
        panelNext.setLayout(panelNextLayout);
        panelNextLayout.setHorizontalGroup(
            panelNextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(panelNextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelNextLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jBNext, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        panelNextLayout.setVerticalGroup(
            panelNextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 77, Short.MAX_VALUE)
            .addGroup(panelNextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelNextLayout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addComponent(jBNext, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(22, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelCreador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelRuta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(panelBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPallets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(panelCreador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(panelBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(panelRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelPallets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGO0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGO0ActionPerformed
        Ordenar1();
        ValidarDatos1();        
    }//GEN-LAST:event_jButtonGO0ActionPerformed

    private void jBDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDocumentActionPerformed
       
       // abrirarchivo("D:/Proyectos java/Lisanti version1.0/JFrameRutas.xlsx");
//       abrirarchivo("D:/Users/Fredy/Documents/NetBeansProjects/ArmadoPalletV1/src/rutasMacro.xlsm");
        abrirarchivo("C:/Users/Fredy/Documents/Lisanti/rutasMacro.xlsm");
//       abrirarchivo("C:/User/SANTIAGO/Desktop/rutasMacro.xlsm");
    }//GEN-LAST:event_jBDocumentActionPerformed

    private void jBNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNewActionPerformed

limpiaTabla();
    }//GEN-LAST:event_jBNewActionPerformed

    private void jBImport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBImport1ActionPerformed
          
        List cellData = new ArrayList();
        try {
            FileInputStream fileInputStream = new FileInputStream(f);
            XSSFWorkbook workBook = new XSSFWorkbook (fileInputStream);
            XSSFSheet hssfSheet= workBook.getSheetAt(0); //OBTENEMOS LA PRIMERA HOJA
                      
            Iterator rowIterator = hssfSheet.rowIterator(); //OBTENEMOS LAS FILAS
            
            while (rowIterator.hasNext()) {         
                
                XSSFRow hssfRow = (XSSFRow)rowIterator.next(); //Obtenemos datos celda 0
                Iterator iterator = hssfRow.cellIterator();
                List cellTemp= new ArrayList();
                
                while (iterator.hasNext()) {                    //RECORREMOS LAS CELDAS DE CADA FILA
                    XSSFCell hssfCell = (XSSFCell) iterator.next();
                    cellTemp.add(hssfCell);
                }
                cellData.add(cellTemp);
            } //HASTA AQUI VA EL CONSTRUCTOR
        } catch (Exception e) {     //FIN TRY
            e.printStackTrace();
        }
        
        int longitud= jText1.getText().toString().length();
        if(longitud ==0){
        JOptionPane.showMessageDialog(null,"Please enter number of rows");
        }
        else{
        Obtener1(cellData);
        }
             
    }//GEN-LAST:event_jBImport1ActionPerformed

 
    private void jBImport2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBImport2ActionPerformed
            List cellData = new ArrayList();
        try {
            FileInputStream fileInputStream = new FileInputStream(f);
            XSSFWorkbook workBook = new XSSFWorkbook (fileInputStream);
            XSSFSheet hssfSheet= workBook.getSheetAt(1); //OBTENEMOS LA PRIMERA HOJA
                      
            Iterator rowIterator = hssfSheet.rowIterator(); //OBTENEMOS LAS FILAS
            
            while (rowIterator.hasNext()) {         
                
                XSSFRow hssfRow = (XSSFRow)rowIterator.next(); //Obtenemos datos celda 0
                Iterator iterator = hssfRow.cellIterator();
                List cellTemp= new ArrayList();
                
                while (iterator.hasNext()) {                    //RECORREMOS LAS CELDAS DE CADA FILA
                    XSSFCell hssfCell = (XSSFCell) iterator.next();
                    cellTemp.add(hssfCell);
                }
                cellData.add(cellTemp);
            } //HASTA AQUI VA EL CONSTRUCTOR
        } catch (Exception e) {     //FIN TRY
            e.printStackTrace();
        }
        
        int longitud= jText2.getText().toString().length();
        if(longitud ==0){
        JOptionPane.showMessageDialog(null,"Please enter number of rows");
        }
        else{
        Obtener2(cellData);
        }
    }//GEN-LAST:event_jBImport2ActionPerformed

    private void jBImport3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBImport3ActionPerformed
           
        List cellData = new ArrayList();
        try {
            FileInputStream fileInputStream = new FileInputStream(f);
            XSSFWorkbook workBook = new XSSFWorkbook (fileInputStream);
            XSSFSheet hssfSheet= workBook.getSheetAt(2); //OBTENEMOS LA PRIMERA HOJA
                      
            Iterator rowIterator = hssfSheet.rowIterator(); //OBTENEMOS LAS FILAS
            
            while (rowIterator.hasNext()) {         
                
                XSSFRow hssfRow = (XSSFRow)rowIterator.next(); //Obtenemos datos celda 0
                Iterator iterator = hssfRow.cellIterator();
                List cellTemp= new ArrayList();
                
                while (iterator.hasNext()) {                    //RECORREMOS LAS CELDAS DE CADA FILA
                    XSSFCell hssfCell = (XSSFCell) iterator.next();
                    cellTemp.add(hssfCell);
                }
                cellData.add(cellTemp);
            } //HASTA AQUI VA EL CONSTRUCTOR
        } catch (Exception e) {     //FIN TRY
            e.printStackTrace();
        }
        
        int longitud= jText3.getText().toString().length();
        if(longitud ==0){
        JOptionPane.showMessageDialog(null,"Please enter number of rows");
        }
        else{
        Obtener3(cellData);
        }
        
        
    }//GEN-LAST:event_jBImport3ActionPerformed

    private void jBImport4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBImport4ActionPerformed
        List cellData = new ArrayList();
        try {
            FileInputStream fileInputStream = new FileInputStream(f);
            XSSFWorkbook workBook = new XSSFWorkbook (fileInputStream);
            XSSFSheet hssfSheet= workBook.getSheetAt(3); //OBTENEMOS LA PRIMERA HOJA
                      
            Iterator rowIterator = hssfSheet.rowIterator(); //OBTENEMOS LAS FILAS
            
            while (rowIterator.hasNext()) {         
                
                XSSFRow hssfRow = (XSSFRow)rowIterator.next(); //Obtenemos datos celda 0
                Iterator iterator = hssfRow.cellIterator();
                List cellTemp= new ArrayList();
                
                while (iterator.hasNext()) {                    //RECORREMOS LAS CELDAS DE CADA FILA
                    XSSFCell hssfCell = (XSSFCell) iterator.next();
                    cellTemp.add(hssfCell);
                }
                cellData.add(cellTemp);
            } //HASTA AQUI VA EL CONSTRUCTOR
        } catch (Exception e) {     //FIN TRY
            e.printStackTrace();
        }
        
        int longitud= jText4.getText().toString().length();
        if(longitud ==0){
        JOptionPane.showMessageDialog(null,"Please enter number of rows");
        }
        else{
        Obtener4(cellData);
        }
        
    }//GEN-LAST:event_jBImport4ActionPerformed

    private void jButtonGOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGOActionPerformed
        Ordenar2();
        ValidarDatos2();        
    }//GEN-LAST:event_jButtonGOActionPerformed

    private void jButtonGO3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGO3ActionPerformed
         Ordenar3();
        ValidarDatos3();     
    }//GEN-LAST:event_jButtonGO3ActionPerformed

    private void jButtonG04ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonG04ActionPerformed
        Ordenar4();
        ValidarDatos4();        
    }//GEN-LAST:event_jButtonG04ActionPerformed

    private void jbtPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPrintActionPerformed

        rutaActual= jLabelNoRuta.getText();
        
        JDialogUnir accesoUnir = new JDialogUnir(this,true);
        accesoUnir.modificarRuta("");
//        UnirPallets();
//        UnirPallets2();

int datosT1= jtableProductos1.getRowCount();

    if(datosT1!=0){
    UnirPallets(accesoUnir);
}
    else{
    JOptionPane.showMessageDialog(null,"There are no products");
    }
        System.err.println("datoT1= "+datosT1);
    
    }//GEN-LAST:event_jbtPrintActionPerformed

    private void jBNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNextActionPerformed
      
        this.dispose();
    }//GEN-LAST:event_jBNextActionPerformed

    private void jBScanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBScanActionPerformed
        
    abrirarchivo("C:/FreeOCR/FreeOCR.exe");
        
    }//GEN-LAST:event_jBScanActionPerformed

    public void UnirPallets(JDialogUnir accesoUnir){
//        JDialogUnir accesoUnir = new JDialogUnir(this,true);
        int datosT1= jtableProductos1.getRowCount();
        
        String descripcion="";
        String cantidad="";
        String locacion="";
        boolean titulo= false;
        int cajasPallet=0;
                  
        
        
     //----------------- CONTAMOS LAS CAJAS ----------------------
          
     
         //----- OBTENEMOS LOS VALORES DE LA TABLA1 ORIGEN-------- 
                  
         for (int t1 = 0; t1 < datosT1+1; t1++) {
          

             if(titulo==false){
                 
                 for (int i = 0; i < 2; i++) {
                     
                     if(i==0){
                     descripcion="PALLET # 1                        QTY: "+String.valueOf(cajasP1);
//                    cantidad="  ";
                    cantidad= String.valueOf(totalCajas);
                    locacion="";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     }
                     
                      if(i==1){
                          
                     descripcion="------------------------------------ ";
                    cantidad="----------------------------------------";
                    locacion=" --------------------------------------";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     }
                     
                 }
                                           
              titulo= true;
             }
             else{ 
              descripcion = jtableProductos1.getValueAt(t1-1,0).toString(); 
              cantidad= jtableProductos1.getValueAt(t1-1,1).toString(); 
              locacion= jtableProductos1.getValueAt(t1-1,2).toString(); 
              Object producto[]={descripcion,cantidad,locacion};//CREAMOS UN OBJETO
              accesoUnir.tablaProducto.addRow(producto);
             }
      
        
//       accesoUnir.tablaProducto.addRow(producto);
        }
       
      //---------TABLA DOS -------------------
      int datosT2= jtableProductos2.getRowCount();
      if(datosT2!=0){
      UnirPallets2(accesoUnir);
      }
       
       //------ ENVIAREMOS UN DATO PRUEBA --------

       accesoUnir.setVisible(true);
       
        
    }
    
      public void UnirPallets2(JDialogUnir accesoUnir){
        
        int datosT2= jtableProductos2.getRowCount();
        String descripcion="";
        String cantidad="";
        String locacion="";
        boolean titulo= false;
         //----- OBTENEMOS LOS VALORES DE LA TABLA1 ORIGEN-------- 
                  
         for (int t1 = 0; t1 < datosT2+1; t1++) {
  
             if(titulo==false){
                 
                 for (int i = 0; i <= 2; i++) {
                     
                       if(i==0){
                     descripcion=" ";
                    cantidad="  ";
                    locacion="  ";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     
                     }
                     
                     if(i==1){
                     descripcion="PALLET # 2                        QTY: "+String.valueOf(cajasP2);
                    cantidad="  ";
                    locacion=" ";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     }
                     
                      if(i==2){
                     descripcion="------------------------------------ ";
                    cantidad="----------------------------------------";
                    locacion=" --------------------------------------";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     }
                     
                 }
                                           
              titulo= true;
             }
             else{ 
              descripcion = jtableProductos2.getValueAt(t1-1,0).toString(); 
              cantidad= jtableProductos2.getValueAt(t1-1,1).toString(); 
              locacion= jtableProductos2.getValueAt(t1-1,2).toString(); 
              Object producto[]={descripcion,cantidad,locacion};//CREAMOS UN OBJETO
              accesoUnir.tablaProducto.addRow(producto);
             }
      
        
//       accesoUnir.tablaProducto.addRow(producto);
        }
       
        int datosT3= jtableProductos3.getRowCount();
      if(datosT3!=0){
      UnirPallets3(accesoUnir);
      }
    }
      
       public void UnirPallets3(JDialogUnir accesoUnir){
        
        int datosT2= jtableProductos3.getRowCount();
        String descripcion="";
        String cantidad="";
        String locacion="";
        boolean titulo= false;
         //----- OBTENEMOS LOS VALORES DE LA TABLA1 ORIGEN-------- 
                  
         for (int t1 = 0; t1 < datosT2+1; t1++) {

             if(titulo==false){
                 
                 for (int i = 0; i <= 2; i++) {
                     
                       if(i==0){
                     descripcion=" ";
                    cantidad="  ";
                    locacion="  ";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     
                     }
                     
                     if(i==1){
                     descripcion="PALLET # 3                        QTY: "+String.valueOf(cajasP3);
                    cantidad="  ";
                    locacion=" ";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     }
                     
                      if(i==2){
                     descripcion="------------------------------------ ";
                    cantidad="----------------------------------------";
                    locacion=" --------------------------------------";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     }
                     
                 }
                                           
              titulo= true;
             }
             else{ 
              descripcion = jtableProductos3.getValueAt(t1-1,0).toString(); 
              cantidad= jtableProductos3.getValueAt(t1-1,1).toString(); 
              locacion= jtableProductos3.getValueAt(t1-1,2).toString(); 
              Object producto[]={descripcion,cantidad,locacion};//CREAMOS UN OBJETO
              accesoUnir.tablaProducto.addRow(producto);
             }
      
        
//       accesoUnir.tablaProducto.addRow(producto);
        }
       
        int datosT3= jtableProductos3.getRowCount();
      if(datosT3!=0){
      UnirPallets4(accesoUnir);
      }
    }
     public void UnirPallets4(JDialogUnir accesoUnir){
        
        int datosT2= jtableProductos4.getRowCount();
        String descripcion="";
        String cantidad="";
        String locacion="";
        boolean titulo= false;
         //----- OBTENEMOS LOS VALORES DE LA TABLA1 ORIGEN-------- 
                  
         for (int t1 = 0; t1 < datosT2+1; t1++) {

             if(titulo==false){
                 
                 for (int i = 0; i <= 2; i++) {
                     
                       if(i==0){
                     descripcion=" ";
                    cantidad="  ";
                    locacion="  ";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     
                     }
                     
                     if(i==1){
                     descripcion="PALLET # 4                        QTY: "+String.valueOf(cajasP4);
                    cantidad="  ";
                    locacion=" ";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     }
                     
                      if(i==2){
                     descripcion="------------------------------------ ";
                    cantidad="----------------------------------------";
                    locacion=" --------------------------------------";   
                    Object producto[]={descripcion,cantidad,locacion};
                     accesoUnir.tablaProducto.addRow(producto);  
                     }
                     
                 }
                                           
              titulo= true;
             }
             else{ 
              descripcion = jtableProductos4.getValueAt(t1-1,0).toString(); 
              cantidad= jtableProductos4.getValueAt(t1-1,1).toString(); 
              locacion= jtableProductos4.getValueAt(t1-1,2).toString(); 
              Object producto[]={descripcion,cantidad,locacion};//CREAMOS UN OBJETO
              accesoUnir.tablaProducto.addRow(producto);
             }

        }
       
     
    }
       public void setVisible(boolean bVisible)
 {
     if(bVisible == false)
     {
         super.setVisible(bVisible);
         return;
     }

     
     super.setVisible(bVisible);
     return;
 }
     public void Obtener1(List cellDataList){
       //CREO MI MATRIZ
        String [][] matriz = null;
        int Nofilas= Integer.parseInt(jText1.getText().toString());
     
           String[]casa= new String[4];
           String [] casa2= new String[3];
           String columna0,columna1,columna2,columna3;
           String meterDatos[]= new String[4];
          String datosTabla[][]={};
          String titulosTabla[]={"DESCRIPTION","QUALITY","LOCATION"};  //Determino el tamaño
          tablaProducto1= new DefaultTableModel(datosTabla, titulosTabla);
          jtableProductos1.setModel(tablaProducto1);
         
     
         
                Object [][]miobjeto = null;
//        for(int i=0; i<cellDataList.size();i++){  //DATOS METIDOS POR CONSOLA USUARIO!!!
          for(int i=0; i<Nofilas;i++){
            List cellTempList= (List) cellDataList.get(i);
 
            for (int j=0; j< cellTempList.size(); j++){
              matriz= new String[cellDataList.size()][cellTempList.size()];
               miobjeto= new Object[cellDataList.size()][cellTempList.size()];
               
               
                XSSFCell hssfCell = (XSSFCell) cellTempList.get(j);
                String stringCellValue = hssfCell.toString(); //OBTENEMOS EL VALOR Y LO PASAMOS A STRING
              //  System.out.print(stringCellValue+" "); //IMPRIMIMOS
             
              matriz[i][j]= stringCellValue; //SEGUN J Organizo la columna
              casa[j]=stringCellValue;
              if(j==0){
              columna0=stringCellValue;
              meterDatos[0]=stringCellValue;
              }
               if(j==1){
             columna1=stringCellValue;
             
             String filtro=columna1;
            filtro = FiltroNo(filtro);
 
              meterDatos[1]= filtro;//METODO PARA FILTRAR DATOS
                 //  System.err.println(columna1.replaceAll(punto,espacio));            
              }
                if(j==2){
             columna2=stringCellValue;                                 
             String filtro = null;
             filtro= columna2.replaceAll("O","0");
             filtro= filtro.replace(" ","");
           
             meterDatos[2]=filtro;
              }
                 if(j==3){
              columna3=stringCellValue;
              meterDatos[3]=stringCellValue;
            
              }

             // tablaProducto.addRow(casa);
            } // fin J
          tablaProducto1.addRow(meterDatos);   //INGRESO LOS DATOS WINNER WINNER CHICKEN DINNER
             
                    
        } //FIN I
           
        Organizar org = new Organizar(tablaProducto1);
        
       SumarPallets sumaP1= new SumarPallets(tablaProducto1);             
        totalCajas= totalCajas + sumaP1.obtenerCajas();  
        System.err.println("totalCajasMias= "+ totalCajas);
        cajasP1= sumaP1.obtenerCajas();
       
    }
     public void Obtener2(List cellDataList){
       //CREO MI MATRIZ
        String [][] matriz = null;
        int Nofilas= Integer.parseInt(jText2.getText().toString());
     
           String[]casa= new String[4];
           String [] casa2= new String[3];
           String columna0,columna1,columna2,columna3;
           String meterDatos[]= new String[4];
          String datosTabla[][]={};
          String titulosTabla[]={"DESCRIPTION","QUALITY","LOCATION"};  //Determino el tamaño
          tablaProducto2= new DefaultTableModel(datosTabla, titulosTabla);
          jtableProductos2.setModel(tablaProducto2);
         
     
         
                Object [][]miobjeto = null;
//        for(int i=0; i<cellDataList.size();i++){  //DATOS METIDOS POR CONSOLA USUARIO!!!
          for(int i=0; i<Nofilas;i++){
            List cellTempList= (List) cellDataList.get(i);
 
            for (int j=0; j< cellTempList.size(); j++){
              matriz= new String[cellDataList.size()][cellTempList.size()];
               miobjeto= new Object[cellDataList.size()][cellTempList.size()];
               
               
                XSSFCell hssfCell = (XSSFCell) cellTempList.get(j);
                String stringCellValue = hssfCell.toString(); //OBTENEMOS EL VALOR Y LO PASAMOS A STRING
              //  System.out.print(stringCellValue+" "); //IMPRIMIMOS
             
              matriz[i][j]= stringCellValue; //SEGUN J Organizo la columna
              casa[j]=stringCellValue;
              if(j==0){
              columna0=stringCellValue;
              meterDatos[0]=stringCellValue;
              }
               if(j==1){
             columna1=stringCellValue;
           
            String filtro=columna1;
            filtro = FiltroNo(filtro);   //ELIMINO LOS PUNTOS Y CERO QUE SE GENERAN
          
              meterDatos[1]= filtro;//DATOS FILTRADOS
                      
              }
                if(j==2){
             columna2=stringCellValue;                                 
             String filtro = null;
             filtro= columna2.replaceAll("O","0");
             filtro= filtro.replace(" ","");
           
             meterDatos[2]=filtro;
              }
                 if(j==3){
              columna3=stringCellValue;
              meterDatos[3]=stringCellValue;
            
              }

             // tablaProducto.addRow(casa);
            } // fin J
          tablaProducto2.addRow(meterDatos);   //INGRESO LOS DATOS WINNER WINNER CHICKEN DINNER

        } //FIN I
          Organizar org = new Organizar(tablaProducto2); 
          SumarPallets sumaP2= new SumarPallets(tablaProducto2);             
         totalCajas= totalCajas + sumaP2.obtenerCajas(); 
         cajasP2= sumaP2.obtenerCajas();
    }
     public void Obtener3(List cellDataList){
       //CREO MI MATRIZ
        String [][] matriz = null;
        int Nofilas= Integer.parseInt(jText3.getText().toString());
    
           String[]casa= new String[4];
           String [] casa2= new String[3];
           String columna0,columna1,columna2,columna3;
           String meterDatos[]= new String[4];
          String datosTabla[][]={};
          String titulosTabla[]={"DESCRIPTION","QUALITY","LOCATION"};  //Determino el tamaño
          tablaProducto3= new DefaultTableModel(datosTabla, titulosTabla);
          jtableProductos3.setModel(tablaProducto3);
         
     
         
                Object [][]miobjeto = null;
//        for(int i=0; i<cellDataList.size();i++){  //DATOS METIDOS POR CONSOLA USUARIO!!!
          for(int i=0; i<Nofilas;i++){
            List cellTempList= (List) cellDataList.get(i);
 
            for (int j=0; j< cellTempList.size(); j++){
              matriz= new String[cellDataList.size()][cellTempList.size()];
               miobjeto= new Object[cellDataList.size()][cellTempList.size()];
               
               
                XSSFCell hssfCell = (XSSFCell) cellTempList.get(j);
                String stringCellValue = hssfCell.toString(); //OBTENEMOS EL VALOR Y LO PASAMOS A STRING
              //  System.out.print(stringCellValue+" "); //IMPRIMIMOS
             
              matriz[i][j]= stringCellValue; //SEGUN J Organizo la columna
              casa[j]=stringCellValue;
              if(j==0){
              columna0=stringCellValue;
              meterDatos[0]=stringCellValue;
              }
               if(j==1){
             columna1=stringCellValue;
             
             String filtro=columna1;
            filtro = FiltroNo(filtro);
            
              //meterDatos[1]=stringCellValue;
              meterDatos[1]= filtro;//METODO PARA FILTRAR DATOS
                 //  System.err.println(columna1.replaceAll(punto,espacio));            
              }
                if(j==2){
             columna2=stringCellValue;                                 
             String filtro = null;
             filtro= columna2.replaceAll("O","0");
             filtro= filtro.replace(" ","");
           
             meterDatos[2]=filtro;
              }
                 if(j==3){
              columna3=stringCellValue;
              meterDatos[3]=stringCellValue;
            
              }

             // tablaProducto.addRow(casa);
            } // fin J
          tablaProducto3.addRow(meterDatos);   //INGRESO LOS DATOS WINNER WINNER CHICKEN DINNER

        } //FIN I
          Organizar org = new Organizar(tablaProducto3);  
          SumarPallets sumaP3= new SumarPallets(tablaProducto3);             
         totalCajas= totalCajas + sumaP3.obtenerCajas(); 
         cajasP3= sumaP3.obtenerCajas();
    }
     public void Obtener4(List cellDataList){
       //CREO MI MATRIZ
        String [][] matriz = null;
        int Nofilas= Integer.parseInt(jText4.getText().toString());
     
           String[]casa= new String[4];
           String [] casa2= new String[3];
           String columna0,columna1,columna2,columna3;
           String meterDatos[]= new String[4];
          String datosTabla[][]={};
          String titulosTabla[]={"DESCRIPTION","QUALITY","LOCATION"};  //Determino el tamaño
          tablaProducto4= new DefaultTableModel(datosTabla, titulosTabla);
          jtableProductos4.setModel(tablaProducto4);
         
     
         
                Object [][]miobjeto = null;
//        for(int i=0; i<cellDataList.size();i++){  //DATOS METIDOS POR CONSOLA USUARIO!!!
          for(int i=0; i<Nofilas;i++){
            List cellTempList= (List) cellDataList.get(i);
 
            for (int j=0; j< cellTempList.size(); j++){
              matriz= new String[cellDataList.size()][cellTempList.size()];
               miobjeto= new Object[cellDataList.size()][cellTempList.size()];
               
               
                XSSFCell hssfCell = (XSSFCell) cellTempList.get(j);
                String stringCellValue = hssfCell.toString(); //OBTENEMOS EL VALOR Y LO PASAMOS A STRING
              //  System.out.print(stringCellValue+" "); //IMPRIMIMOS
             
              matriz[i][j]= stringCellValue; //SEGUN J Organizo la columna
              casa[j]=stringCellValue;
              if(j==0){
              columna0=stringCellValue;
              meterDatos[0]=stringCellValue;
              }
               if(j==1){
             columna1=stringCellValue;
            
             String filtro=columna1;
            filtro = FiltroNo(filtro);
            
              //meterDatos[1]=stringCellValue;
              meterDatos[1]= filtro;//METODO PARA FILTRAR DATOS
                 //  System.err.println(columna1.replaceAll(punto,espacio));            
              }
                if(j==2){
             columna2=stringCellValue;                                 
             String filtro = null;
             filtro= columna2.replaceAll("O","0");             
             filtro= filtro.replace(" ","");
           
             meterDatos[2]=filtro;
              }
                 if(j==3){
              columna3=stringCellValue;
              meterDatos[3]=stringCellValue;
            
              }

             // tablaProducto.addRow(casa);
            } // fin J
          tablaProducto4.addRow(meterDatos);   //INGRESO LOS DATOS WINNER WINNER CHICKEN DINNER
          
        } //FIN I
          Organizar org = new Organizar(tablaProducto4);
          SumarPallets sumaP4= new SumarPallets(tablaProducto4);             
         totalCajas= totalCajas + sumaP4.obtenerCajas(); 
         cajasP4= sumaP4.obtenerCajas();
    }
     public void abrirarchivo(String archivo){

     try {

            File objetofile = new File (archivo);
            Desktop.getDesktop().open(objetofile);

     }catch (IOException ex) {

            System.out.println(ex);

     }

}   
     public void ValidarDatos1 (){
           //DECLARO VARIABLES

           int NoDatos = jtableProductos1.getRowCount(); //OBTENGO LA CANTIDAD DE FILAS                        
           int decremento=0;
           int moverVector=0;
           int []posicionBorrar= new int[20];
           int cajasActuales=0;
           int cajasRepetidas=0;
           int cajasRepetidasAux=0;
           int cajasTotales=0;
           int posicionSumar=0;
           String cadena1Locacion;
           String cadena1Producto;
           char [] caracteres1;          
           //----------- PRIMER IF--------------
        for (int j= 0; j <(NoDatos); j++) {   //DEBE IR HASTA NoDatos                              01-25/ 5:25 AM 
      
            //---------CREAMOS NUESTRAS VARIABLES ------------         
            String  cadena2Locacion;
            String cajasCadena2;
            String cadena2Producto;   
            
            // -------- INICIALIZAMOS  VARIABLES --------------
            cadena2Locacion= (String) jtableProductos1.getValueAt(j, 2); 
            cadena2Producto = (String) jtableProductos1.getValueAt(j, 0); 
            cajasCadena2 = (String) jtableProductos1.getValueAt(j, 1); 
            cajasRepetidas=0;
            
            char [] caracteres2 = cadena2Producto.toCharArray();  //FILTRO POR CARACTERES
            
        //------ SEGUNDO CICLO FOR ---------
        for (int i = (NoDatos-1); i > j; i--) {   
        //------------ INICIALIZAMOS VARIABLES -----------------
       cadena1Locacion= (String) jtableProductos1.getValueAt(i, 2);
       cadena1Producto = (String) jtableProductos1.getValueAt(i, 0);
        String cajasCadena1Locacion = (String) jtableProductos1.getValueAt(i, 1);
        cajasTotales=0;  //ACTUALIZO LOS VALORES
        cajasActuales =   Integer.parseInt(cajasCadena2); //CUENTO MIS CAJAS ACTUALES
        caracteres1 = cadena1Producto.toCharArray();      //FILTRO POR CARACTERES
        
        //-------------- CICLO COMPARAR IGUALDADES ---------------------------
                    if(cadena1Locacion.equals(cadena2Locacion) &&       //TRES NIVELES DE FILTROS SIEMPRE
                       caracteres1[0]==caracteres2[0]          &&
                       caracteres1[1]==caracteres2[1]          &&
                       caracteres1[3]==caracteres2[3]                                                     
                        ){
                        
                       if(cadena1Locacion.equals("FA54B") ||
                          cadena1Locacion.equals("FC18A") ||     
                          cadena1Locacion.equals("FE16B") ||    
                          cadena1Locacion.equals("FE42B") ||    
                          cadena1Locacion.equals("FF47B")                                                    
                          )
                       {
                           System.err.println("Cadena 1 = "+cadena1Producto);
                           System.err.println("Cadena 2 = "+cadena2Producto);
                             int tamano1= NoLetras(cadena1Producto);
                             int tamano2= NoLetras(cadena2Producto);
                             
                             System.err.println("tamano 1= "+tamano1);
                             System.err.println("tamano 2= "+tamano2);
                           
                           if(tamano1==tamano2){
                               // -------------------ULTIMO FILTRO -----------------------                      NOTA!
                               if(cadena1Locacion.equals("FE16B") || cadena1Locacion.equals("FE42B")){   //DEBO CORREGIR EN FUTURO------------
                                   System.err.println("ENTRANDO OTIS O STUFER");  
                                     if(cadena1Producto.equals(cadena2Producto)){
                                             System.err.println("igualitos");
                                         //-------- ALGORITMO SUPER FILTRADO -----------
                               
                                         cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                         //--------ALGORITMO--------------
                                          cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                                          tablaProducto1.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                                           decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                                           NoDatos = jtableProductos1.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                                     }else{
                                   System.err.println("NADA");                          
                               }
                               
                               }else{
                               }
                       
                               //-------- ALGORITMO SUPER FILTRADO -----------
                               
                                cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                //--------ALGORITMO--------------
                                 cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                                 tablaProducto1.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                                 decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                                 NoDatos = jtableProductos1.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                               
                           }else{
                           
                               System.err.println("estuvistes cerca");
                           }

                       }
                       else{
                       cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                //--------ALGORITMO--------------
                        cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                        tablaProducto1.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                        decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                        NoDatos = jtableProductos1.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                       
                       } //FIN ELSE

                  
                    }                
                   
            }//FIN SEGUNDO CICLO
        
        //----------- VALIDACION ULTIMO DATO (NECESARIO) -------------------
            if(j==(NoDatos-1)){
               cajasCadena2 = (String) jtableProductos1.getValueAt(j, 1);
              cajasActuales =   Integer.parseInt(cajasCadena2);
           }
           cajasTotales=cajasRepetidas+cajasActuales;
           tablaProducto1.setValueAt(cajasTotales,j,1);//SOLO SI SE ELIMINA SUMO LAS CAJAS,DONDE ESTA EL CERO VA LA J

       }//FIN PRIMER CICLO

       }
     public void ValidarDatos2 (){
           //DECLARO VARIABLES

           int NoDatos = jtableProductos2.getRowCount(); //OBTENGO LA CANTIDAD DE FILAS            
      

           int decremento=0;
           int moverVector=0;
           int []posicionBorrar= new int[20];
           int cajasActuales=0;
           int cajasRepetidas=0;
           int cajasRepetidasAux=0;
           int cajasTotales=0;
           int posicionSumar=0;
           String cadena1Locacion;
           String cadena1Producto;
           char [] caracteres1;
        for (int j= 0; j <(NoDatos); j++) {   //DEBE IR HASTA NoDatos                              01-25/ 5:25 AM 
            
            //---------CREAMOS NUESTRAS VARIABLES ------------         
            String  cadena2Locacion;
            String cajasCadena2;
            String cadena2Producto;   
            
            // -------- INICIALIZAMOS  VARIABLES --------------
            cadena2Locacion= (String) jtableProductos2.getValueAt(j, 2); 
            cadena2Producto = (String) jtableProductos2.getValueAt(j, 0); 
            cajasCadena2 = (String) jtableProductos2.getValueAt(j, 1); 
            cajasRepetidas=0;
            
            char [] caracteres2 = cadena2Producto.toCharArray();  //FILTRO POR CARACTERES
            
        //------ SEGUNDO CICLO FOR ---------
        for (int i = (NoDatos-1); i > j; i--) {   
        //------------ INICIALIZAMOS VARIABLES -----------------
       cadena1Locacion= (String) jtableProductos2.getValueAt(i, 2);
       cadena1Producto = (String) jtableProductos2.getValueAt(i, 0);
        String cajasCadena1Locacion = (String) jtableProductos2.getValueAt(i, 1);
        cajasTotales=0;  //ACTUALIZO LOS VALORES
        cajasActuales =   Integer.parseInt(cajasCadena2); //CUENTO MIS CAJAS ACTUALES
        caracteres1 = cadena1Producto.toCharArray();      //FILTRO POR CARACTERES
        
        //-------------- CICLO COMPARAR IGUALDADES ---------------------------
                    if(cadena1Locacion.equals(cadena2Locacion) &&       //TRES NIVELES DE FILTROS SIEMPRE
                       caracteres1[0]==caracteres2[0]          &&
                       caracteres1[1]==caracteres2[1]          &&
                       caracteres1[3]==caracteres2[3]                                                     
                        ){
                        
                       if(cadena1Locacion.equals("FA54B") ||
                          cadena1Locacion.equals("FC18A") ||     
                          cadena1Locacion.equals("FE16B") ||    
                          cadena1Locacion.equals("FE42B") ||    
                          cadena1Locacion.equals("FF47B")                                                    
                          )
                       {
                           System.err.println("Cadena 1 = "+cadena1Producto);
                           System.err.println("Cadena 2 = "+cadena2Producto);
                             int tamano1= NoLetras(cadena1Producto);
                             int tamano2= NoLetras(cadena2Producto);
                             
                             System.err.println("tamano 1= "+tamano1);
                             System.err.println("tamano 2= "+tamano2);
                           
                           if(tamano1==tamano2){
                               // -------------------ULTIMO FILTRO -----------------------                      NOTA!
                               if(cadena1Locacion.equals("FE16B") || cadena1Locacion.equals("FE42B")){   //DEBO CORREGIR EN FUTURO------------
                                   System.err.println("ENTRANDO OTIS O STUFER");  
                                     if(cadena1Producto.equals(cadena2Producto)){
                                             System.err.println("igualitos");
                                         //-------- ALGORITMO SUPER FILTRADO -----------
                               
                                         cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                         //--------ALGORITMO--------------
                                          cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                                          tablaProducto2.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                                           decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                                           NoDatos = jtableProductos2.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                                     }else{
                                   System.err.println("NADA");                          
                               }
                               
                               }else{
                               }
                       
                               //-------- ALGORITMO SUPER FILTRADO -----------
                               
                                cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                //--------ALGORITMO--------------
                                 cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                                 tablaProducto2.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                                 decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                                 NoDatos = jtableProductos2.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                               
                           }else{
                           
                               System.err.println("estuvistes cerca");
                           }

                       }
                       else{
                       cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                //--------ALGORITMO--------------
                        cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                        tablaProducto2.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                        decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                        NoDatos = jtableProductos2.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                       
                       } //FIN ELSE

                  
                    }                
                   
            }//FIN SEGUNDO CICLO
        
        //----------- VALIDACION ULTIMO DATO (NECESARIO) -------------------
            if(j==(NoDatos-1)){
               cajasCadena2 = (String) jtableProductos2.getValueAt(j, 1);
              cajasActuales =   Integer.parseInt(cajasCadena2);
           }
           cajasTotales=cajasRepetidas+cajasActuales;
           tablaProducto2.setValueAt(cajasTotales,j,1);//SOLO SI SE ELIMINA SUMO LAS CAJAS,DONDE ESTA EL CERO VA LA J

       }//FIN PRIMER CICLO

       }
     public void ValidarDatos3 (){
           //DECLARO VARIABLES

           int NoDatos = jtableProductos3.getRowCount(); //OBTENGO LA CANTIDAD DE FILAS            
      

           int decremento=0;
           int moverVector=0;
           int []posicionBorrar= new int[20];
           int cajasActuales=0;
           int cajasRepetidas=0;
           int cajasRepetidasAux=0;
           int cajasTotales=0;
           int posicionSumar=0;
           String cadena1Locacion;
           String cadena1Producto;
           char [] caracteres1;
        for (int j= 0; j <(NoDatos); j++) {   //DEBE IR HASTA NoDatos                              01-25/ 5:25 AM 
            
            //---------CREAMOS NUESTRAS VARIABLES ------------         
            String  cadena2Locacion;
            String cajasCadena2;
            String cadena2Producto;   
            
            // -------- INICIALIZAMOS  VARIABLES --------------
            cadena2Locacion= (String) jtableProductos3.getValueAt(j, 2); 
            cadena2Producto = (String) jtableProductos3.getValueAt(j, 0); 
            cajasCadena2 = (String) jtableProductos3.getValueAt(j, 1); 
            cajasRepetidas=0;
            
            char [] caracteres2 = cadena2Producto.toCharArray();  //FILTRO POR CARACTERES
            
           
            
        //------ SEGUNDO CICLO FOR ---------
        for (int i = (NoDatos-1); i > j; i--) {   
        //------------ INICIALIZAMOS VARIABLES -----------------
       cadena1Locacion= (String) jtableProductos3.getValueAt(i, 2);
       cadena1Producto = (String) jtableProductos3.getValueAt(i, 0);
        String cajasCadena1Locacion = (String) jtableProductos3.getValueAt(i, 1);
        cajasTotales=0;  //ACTUALIZO LOS VALORES
        cajasActuales =   Integer.parseInt(cajasCadena2); //CUENTO MIS CAJAS ACTUALES
        caracteres1 = cadena1Producto.toCharArray();      //FILTRO POR CARACTERES
        
        //-------------- CICLO COMPARAR IGUALDADES ---------------------------
                    if(cadena1Locacion.equals(cadena2Locacion) &&       //TRES NIVELES DE FILTROS SIEMPRE
                       caracteres1[0]==caracteres2[0]          &&
                       caracteres1[1]==caracteres2[1]          &&
                       caracteres1[3]==caracteres2[3]                                                     
                        ){
                        
                       if(cadena1Locacion.equals("FA54B") ||
                          cadena1Locacion.equals("FC18A") ||     
                          cadena1Locacion.equals("FE16B") ||    
                          cadena1Locacion.equals("FE42B") ||    
                          cadena1Locacion.equals("FF47B")                                                    
                          )
                       {
                           System.err.println("Cadena 1 = "+cadena1Producto);
                           System.err.println("Cadena 2 = "+cadena2Producto);
                             int tamano1= NoLetras(cadena1Producto);
                             int tamano2= NoLetras(cadena2Producto);
                             
                             System.err.println("tamano 1= "+tamano1);
                             System.err.println("tamano 2= "+tamano2);
                           
                           if(tamano1==tamano2){
                               // -------------------ULTIMO FILTRO -----------------------                      NOTA!
                               if(cadena1Locacion.equals("FE16B") || cadena1Locacion.equals("FE42B")){   //DEBO CORREGIR EN FUTURO------------
                                   System.err.println("ENTRANDO OTIS O STUFER");  
                                     if(cadena1Producto.equals(cadena2Producto)){
                                             System.err.println("igualitos");
                                         //-------- ALGORITMO SUPER FILTRADO -----------
                               
                                         cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                         //--------ALGORITMO--------------
                                          cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                                          tablaProducto3.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                                           decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                                           NoDatos = jtableProductos3.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                                     }else{
                                   System.err.println("NADA");                          
                               }
                               
                               }else{
                               }
                       
                               //-------- ALGORITMO SUPER FILTRADO -----------
                               
                                cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                //--------ALGORITMO--------------
                                 cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                                 tablaProducto3.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                                 decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                                 NoDatos = jtableProductos3.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                               
                           }else{
                           
                               System.err.println("estuvistes cerca");
                           }

                       }
                       else{
                       cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                //--------ALGORITMO--------------
                        cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                        tablaProducto3.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                        decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                        NoDatos = jtableProductos3.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                       
                       } //FIN ELSE

                  
                    }                
                 
            }//FIN SEGUNDO CICLO
        
        //----------- VALIDACION ULTIMO DATO (NECESARIO) -------------------
           if(j==(NoDatos-1)){
               cajasCadena2 = (String) jtableProductos3.getValueAt(j, 1);
              cajasActuales =   Integer.parseInt(cajasCadena2);
           }
        
           cajasTotales=cajasRepetidas+cajasActuales;
           tablaProducto3.setValueAt(cajasTotales,j,1);//SOLO SI SE ELIMINA SUMO LAS CAJAS,DONDE ESTA EL CERO VA LA J
           
       }//FIN PRIMER CICLO

       }
     public void ValidarDatos4 (){
           //DECLARO VARIABLES

           int NoDatos = jtableProductos4.getRowCount(); //OBTENGO LA CANTIDAD DE FILAS            
      

           int decremento=0;
           int moverVector=0;
           int []posicionBorrar= new int[20];
           int cajasActuales=0;
           int cajasRepetidas=0;
           int cajasRepetidasAux=0;
           int cajasTotales=0;
           int posicionSumar=0;
           String cadena1Locacion;
           String cadena1Producto;
           char [] caracteres1;
        for (int j= 0; j <(NoDatos); j++) {   //DEBE IR HASTA NoDatos                              01-25/ 5:25 AM 
            
            //---------CREAMOS NUESTRAS VARIABLES ------------         
            String  cadena2Locacion;
            String cajasCadena2;
            String cadena2Producto;   
            
            // -------- INICIALIZAMOS  VARIABLES --------------
            cadena2Locacion= (String) jtableProductos4.getValueAt(j, 2); 
            cadena2Producto = (String) jtableProductos4.getValueAt(j, 0); 
            cajasCadena2 = (String) jtableProductos4.getValueAt(j, 1); 
            cajasRepetidas=0;
            
            char [] caracteres2 = cadena2Producto.toCharArray();  //FILTRO POR CARACTERES
            
        //------ SEGUNDO CICLO FOR ---------
        for (int i = (NoDatos-1); i > j; i--) {   
        //------------ INICIALIZAMOS VARIABLES -----------------
       cadena1Locacion= (String) jtableProductos4.getValueAt(i, 2);
       cadena1Producto = (String) jtableProductos4.getValueAt(i, 0);
        String cajasCadena1Locacion = (String) jtableProductos4.getValueAt(i, 1);
        cajasTotales=0;  //ACTUALIZO LOS VALORES
        cajasActuales =   Integer.parseInt(cajasCadena2); //CUENTO MIS CAJAS ACTUALES
        caracteres1 = cadena1Producto.toCharArray();      //FILTRO POR CARACTERES
        
        //-------------- CICLO COMPARAR IGUALDADES ---------------------------
                    if(cadena1Locacion.equals(cadena2Locacion) &&       //TRES NIVELES DE FILTROS SIEMPRE
                       caracteres1[0]==caracteres2[0]          &&
                       caracteres1[1]==caracteres2[1]          &&
                       caracteres1[3]==caracteres2[3]                                                     
                        ){
                        
                       if(cadena1Locacion.equals("FA54B") ||
                          cadena1Locacion.equals("FC18A") ||     
                          cadena1Locacion.equals("FE16B") ||    
                          cadena1Locacion.equals("FE42B") ||    
                          cadena1Locacion.equals("FF47B")                                                    
                          )
                       {
                           System.err.println("Cadena 1 = "+cadena1Producto);
                           System.err.println("Cadena 2 = "+cadena2Producto);
                             int tamano1= NoLetras(cadena1Producto);
                             int tamano2= NoLetras(cadena2Producto);
                             
                             System.err.println("tamano 1= "+tamano1);
                             System.err.println("tamano 2= "+tamano2);
                           
                           if(tamano1==tamano2){
                               // -------------------ULTIMO FILTRO -----------------------                      NOTA!
                               if(cadena1Locacion.equals("FE16B") || cadena1Locacion.equals("FE42B")){   //DEBO CORREGIR EN FUTURO------------
                                   System.err.println("ENTRANDO OTIS O STUFER");  
                                     if(cadena1Producto.equals(cadena2Producto)){
                                             System.err.println("igualitos");
                                         //-------- ALGORITMO SUPER FILTRADO -----------
                               
                                         cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                         //--------ALGORITMO--------------
                                          cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                                          tablaProducto4.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                                           decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                                           NoDatos = jtableProductos4.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                                     }else{
                                   System.err.println("NADA");                          
                               }
                               
                               }else{
                               }
                       
                               //-------- ALGORITMO SUPER FILTRADO -----------
                               
                                cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                //--------ALGORITMO--------------
                                 cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                                 tablaProducto4.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                                 decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                                 NoDatos = jtableProductos4.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                               
                           }else{
                           
                               System.err.println("estuvistes cerca");
                           }

                       }
                       else{
                       cajasRepetidasAux = Integer.parseInt(cajasCadena1Locacion);   //OBTENGO EL NUMERO DE CAJAS DEL ELEMENTO REPETIDO
                            
                                //--------ALGORITMO--------------
                        cajasRepetidas= cajasRepetidas + cajasRepetidasAux; //OBTENGO EL TOTAL DE CAJAS REPETIDOS                   
                        tablaProducto4.removeRow(i);     //BORRO LA FILA DE LA POSICION i 
                        decremento= decremento+1;         // VALIDO NUEVO TAMAÑO DE TABLA
                        NoDatos = jtableProductos4.getRowCount(); // OBTENGO EL NUEVO TAMAÑO DE LOS DATOS EN TABLA
                       
                       } //FIN ELSE

                  
                    }                
                   
            }//FIN SEGUNDO CICLO
        
        //----------- VALIDACION ULTIMO DATO (NECESARIO) -------------------
            if(j==(NoDatos-1)){
               cajasCadena2 = (String) jtableProductos4.getValueAt(j, 1);
              cajasActuales =   Integer.parseInt(cajasCadena2);
           }
           cajasTotales=cajasRepetidas+cajasActuales;
           tablaProducto4.setValueAt(cajasTotales,j,1);//SOLO SI SE ELIMINA SUMO LAS CAJAS,DONDE ESTA EL CERO VA LA J

       }//FIN PRIMER CICLO

       }
     public void Ordenar1(){
          
      //---------- HEXADECIMAL -----------
    String x= "0x"; 
    String hexString= "FF";
    String hex= x+hexString;
    
    String hex2= "0xF9";
    int dec = (Integer.decode(hex)).intValue();
        System.err.println("hex= "+dec);
        
  //--------- CODIGO ORDENAMIENTO JTABLES ----------------------------
 int datosTabla= jtableProductos1.getRowCount();
    
  String []arrayPosiciones= new String[datosTabla];  //LLENAMOS EL ARREGLO
        for (int llenar = 0; llenar < datosTabla; llenar++) {
         arrayPosiciones[llenar]= (String) jtableProductos1.getValueAt(llenar, 2); 
        }
        
         for (int i2 = 0; i2 < datosTabla; i2++) {
            
            for (int j2 = (datosTabla-1); j2 >=1; j2--) {
                String valor = arrayPosiciones[j2];
                String valorMenos= arrayPosiciones[j2-1];
                valor= x+valor;
                valorMenos = x+valorMenos;
                int pos = (Integer.decode(valor)).intValue();               
                int posMenos= (Integer.decode(valorMenos)).intValue(); 
//                System.err.println("anterior valor="+array[j]);
                if(pos < posMenos){
                   String stringAux= arrayPosiciones[j2-1];
                    arrayPosiciones[j2-1]=arrayPosiciones[j2];
                    arrayPosiciones[j2]=stringAux;
                    
                    //--------AQUI INTERCAMBIAMOS VALORES---------
                    IntercambioTabla1(j2);
                }            
            }           
        }
        System.err.println("datos Tabla= "+datosTabla);
       
    }
     public void Ordenar2(){
          
      //---------- HEXADECIMAL -----------
    String x= "0x"; 
    String hexString= "FF";
    String hex= x+hexString;
    
    String hex2= "0xF9";
    int dec = (Integer.decode(hex)).intValue();
        System.err.println("hex= "+dec);
        
  //--------- CODIGO ORDENAMIENTO JTABLES ----------------------------
 int datosTabla= jtableProductos2.getRowCount();
    
  String []arrayPosiciones= new String[datosTabla];  //LLENAMOS EL ARREGLO
        for (int llenar = 0; llenar < datosTabla; llenar++) {
         arrayPosiciones[llenar]= (String) jtableProductos2.getValueAt(llenar, 2); 
        }
        
         for (int i2 = 0; i2 < datosTabla; i2++) {
            
            for (int j2 = (datosTabla-1); j2 >=1; j2--) {
                String valor = arrayPosiciones[j2];
                String valorMenos= arrayPosiciones[j2-1];
                valor= x+valor;
                valorMenos = x+valorMenos;
                int pos = (Integer.decode(valor)).intValue();               
                int posMenos= (Integer.decode(valorMenos)).intValue(); 
//                System.err.println("anterior valor="+array[j]);
                if(pos < posMenos){
                   String stringAux= arrayPosiciones[j2-1];
                    arrayPosiciones[j2-1]=arrayPosiciones[j2];
                    arrayPosiciones[j2]=stringAux;
                    
                    //--------AQUI INTERCAMBIAMOS VALORES---------
                    IntercambioTabla2(j2);
                }            
            }           
        }
        System.err.println("datos Tabla= "+datosTabla);
       
    }
     public void Ordenar3(){
          
      //---------- HEXADECIMAL -----------
    String x= "0x"; 
    String hexString= "FF";
    String hex= x+hexString;
    
    String hex2= "0xF9";
    int dec = (Integer.decode(hex)).intValue();
        System.err.println("hex= "+dec);
        
  //--------- CODIGO ORDENAMIENTO JTABLES ----------------------------
 int datosTabla= jtableProductos3.getRowCount();
    
  String []arrayPosiciones= new String[datosTabla];  //LLENAMOS EL ARREGLO
        for (int llenar = 0; llenar < datosTabla; llenar++) {
         arrayPosiciones[llenar]= (String) jtableProductos3.getValueAt(llenar, 2); 
        }
        
         for (int i2 = 0; i2 < datosTabla; i2++) {
            
            for (int j2 = (datosTabla-1); j2 >=1; j2--) {
                String valor = arrayPosiciones[j2];
                String valorMenos= arrayPosiciones[j2-1];
                valor= x+valor;
                valorMenos = x+valorMenos;
                int pos = (Integer.decode(valor)).intValue();               
                int posMenos= (Integer.decode(valorMenos)).intValue(); 
//                System.err.println("anterior valor="+array[j]);
                if(pos < posMenos){
                   String stringAux= arrayPosiciones[j2-1];
                    arrayPosiciones[j2-1]=arrayPosiciones[j2];
                    arrayPosiciones[j2]=stringAux;
                    
                    //--------AQUI INTERCAMBIAMOS VALORES---------
                    IntercambioTabla3(j2);
                }            
            }           
        }
        System.err.println("datos Tabla= "+datosTabla);
       
    }
    public void Ordenar4(){
          
      //---------- HEXADECIMAL -----------
    String x= "0x"; 
    String hexString= "FF";
    String hex= x+hexString;
    
    String hex2= "0xF9";
    int dec = (Integer.decode(hex)).intValue();
        System.err.println("hex= "+dec);
        
  //--------- CODIGO ORDENAMIENTO JTABLES ----------------------------
 int datosTabla= jtableProductos4.getRowCount();
    
  String []arrayPosiciones= new String[datosTabla];  //LLENAMOS EL ARREGLO
        for (int llenar = 0; llenar < datosTabla; llenar++) {
         arrayPosiciones[llenar]= (String) jtableProductos4.getValueAt(llenar, 2); 
        }
        
         for (int i2 = 0; i2 < datosTabla; i2++) {
            
            for (int j2 = (datosTabla-1); j2 >=1; j2--) {
                String valor = arrayPosiciones[j2];
                String valorMenos= arrayPosiciones[j2-1];
                valor= x+valor;
                valorMenos = x+valorMenos;
                int pos = (Integer.decode(valor)).intValue();               
                int posMenos= (Integer.decode(valorMenos)).intValue(); 
//                System.err.println("anterior valor="+array[j]);
                if(pos < posMenos){
                   String stringAux= arrayPosiciones[j2-1];
                    arrayPosiciones[j2-1]=arrayPosiciones[j2];
                    arrayPosiciones[j2]=stringAux;
                    
                    //--------AQUI INTERCAMBIAMOS VALORES---------
                    IntercambioTabla4(j2);
                }            
            }           
        }
        System.err.println("datos Tabla= "+datosTabla);
       
    }
     public void IntercambioTabla1(int j2){
    
           String auxDes= (String) jtableProductos1.getValueAt(j2-1, 0);
                    String auxCan=(String) jtableProductos1.getValueAt(j2-1, 1);
                    String auxLoca=(String) jtableProductos1.getValueAt(j2-1, 2);
                    tablaProducto1.setValueAt((String) jtableProductos1.getValueAt(j2, 0),(j2-1),0);
                    tablaProducto1.setValueAt((String) jtableProductos1.getValueAt(j2, 1),(j2-1),1);
                    tablaProducto1.setValueAt((String) jtableProductos1.getValueAt(j2, 2),(j2-1),2);
                    tablaProducto1.setValueAt(auxDes, j2, 0);
                    tablaProducto1.setValueAt(auxCan, j2, 1);
                    tablaProducto1.setValueAt(auxLoca, j2, 2);
    
    }    
     public void IntercambioTabla2(int j2){
    
           String auxDes= (String) jtableProductos2.getValueAt(j2-1, 0);
                    String auxCan=(String) jtableProductos2.getValueAt(j2-1, 1);
                    String auxLoca=(String) jtableProductos2.getValueAt(j2-1, 2);
                    tablaProducto2.setValueAt((String) jtableProductos2.getValueAt(j2, 0),(j2-1),0);
                    tablaProducto2.setValueAt((String) jtableProductos2.getValueAt(j2, 1),(j2-1),1);
                    tablaProducto2.setValueAt((String) jtableProductos2.getValueAt(j2, 2),(j2-1),2);
                    tablaProducto2.setValueAt(auxDes, j2, 0);
                    tablaProducto2.setValueAt(auxCan, j2, 1);
                    tablaProducto2.setValueAt(auxLoca, j2, 2);
    
    }
     public void IntercambioTabla3(int j2){
    
           String auxDes= (String) jtableProductos3.getValueAt(j2-1, 0);
                    String auxCan=(String) jtableProductos3.getValueAt(j2-1, 1);
                    String auxLoca=(String) jtableProductos3.getValueAt(j2-1, 2);
                    tablaProducto3.setValueAt((String) jtableProductos3.getValueAt(j2, 0),(j2-1),0);
                    tablaProducto3.setValueAt((String) jtableProductos3.getValueAt(j2, 1),(j2-1),1);
                    tablaProducto3.setValueAt((String) jtableProductos3.getValueAt(j2, 2),(j2-1),2);
                    tablaProducto3.setValueAt(auxDes, j2, 0);
                    tablaProducto3.setValueAt(auxCan, j2, 1);
                    tablaProducto3.setValueAt(auxLoca, j2, 2);
    
    }
    public void IntercambioTabla4(int j2){
    
           String auxDes= (String) jtableProductos4.getValueAt(j2-1, 0);
                    String auxCan=(String) jtableProductos4.getValueAt(j2-1, 1);
                    String auxLoca=(String) jtableProductos4.getValueAt(j2-1, 2);
                    tablaProducto4.setValueAt((String) jtableProductos4.getValueAt(j2, 0),(j2-1),0);
                    tablaProducto4.setValueAt((String) jtableProductos4.getValueAt(j2, 1),(j2-1),1);
                    tablaProducto4.setValueAt((String) jtableProductos4.getValueAt(j2, 2),(j2-1),2);
                    tablaProducto4.setValueAt(auxDes, j2, 0);
                    tablaProducto4.setValueAt(auxCan, j2, 1);
                    tablaProducto4.setValueAt(auxLoca, j2, 2);
    
    }  
         void limpiaTabla(){
             totalCajas=0;
             DefaultTableModel temp;
             DefaultTableModel temp2;
             DefaultTableModel temp3;
             DefaultTableModel temp4;
        try{
             temp = (DefaultTableModel) jtableProductos1.getModel();
             temp2 = (DefaultTableModel) jtableProductos2.getModel();
             temp3 = (DefaultTableModel) jtableProductos3.getModel();
             temp4 = (DefaultTableModel) jtableProductos4.getModel();
            int a =temp.getRowCount();
            int b =temp2.getRowCount();
            int c =temp3.getRowCount();
            int d =temp4.getRowCount();
            for(int i=0; i<a; i++)
            {  temp.removeRow(0); }
            for(int i=0; i<b; i++)
            {  temp2.removeRow(0); }
            for(int i=0; i<c; i++)
            {  temp3.removeRow(0); }
            for(int i=0; i<d; i++)
            {  temp4.removeRow(0); }
            
        }catch(Exception e){
            System.out.println(e);
        }
    }
    
        int NoLetras(String miTexto){
   
       miTexto= miTexto.replaceAll(" ", "");
       return miTexto.length();
   }
        
         public String FiltroNo(String valor){
        
           String nuevoValor=valor;
          nuevoValor = nuevoValor.replace(" ","");
           char arrayValor0,arrayValor1,arrayValor2;//CREO MI ARRAY  
           int tamanoValor= valor.length();     // OBTENGO EL TAMAÑO      
//           arrayValor= valor.charAt(0); // PASO STRING A CHAR
           if(tamanoValor==3){
                 arrayValor0= valor.charAt(0);
                 nuevoValor= ""+arrayValor0;
           }
           if(tamanoValor==4){
            arrayValor0= valor.charAt(0);
            arrayValor1= valor.charAt(1);
            nuevoValor= ""+arrayValor0+arrayValor1;
           }
           
           if(tamanoValor==5){
           arrayValor0= valor.charAt(0);
            arrayValor1= valor.charAt(1);
            arrayValor2= valor.charAt(2);
            nuevoValor= ""+arrayValor0+arrayValor1+arrayValor2;            
           }
           
           
           return nuevoValor;       
       }
         
         public void modificarLabel(String nombre){
        
             jLabelNoRuta.setText(nombre);
             String ruta= jLabelNoRuta.getText();
         }
         
         public  String rta (){
        
             rutaActual= jLabelNoRuta.getText();
            
             return rutaActual;
        }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFramePruebas1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFramePruebas1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFramePruebas1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFramePruebas1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFramePruebas1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBDocument;
    private javax.swing.JButton jBImport1;
    private javax.swing.JButton jBImport2;
    private javax.swing.JButton jBImport3;
    private javax.swing.JButton jBImport4;
    private javax.swing.JButton jBNew;
    private javax.swing.JButton jBNext;
    private javax.swing.JButton jBScan;
    private javax.swing.JButton jButtonG04;
    private javax.swing.JButton jButtonGO;
    private javax.swing.JButton jButtonGO0;
    private javax.swing.JButton jButtonGO3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelNoRuta;
    private javax.swing.JPanel jPanelPallets;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jText1;
    private javax.swing.JTextField jText2;
    private javax.swing.JTextField jText3;
    private javax.swing.JTextField jText4;
    private javax.swing.JButton jbtPrint;
    private javax.swing.JLabel jlbTituloP1;
    private javax.swing.JLabel jlbTituloP2;
    private javax.swing.JLabel jlbTituloP3;
    private javax.swing.JLabel jlbTituloP4;
    private javax.swing.JTable jtableProductos1;
    private javax.swing.JTable jtableProductos2;
    private javax.swing.JTable jtableProductos3;
    private javax.swing.JTable jtableProductos4;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelCreador;
    private javax.swing.JPanel panelNext;
    private javax.swing.JPanel panelPallet1;
    private javax.swing.JPanel panelPallet2;
    private javax.swing.JPanel panelPallet3;
    private javax.swing.JPanel panelPallet4;
    private javax.swing.JPanel panelRuta;
    // End of variables declaration//GEN-END:variables
}
